#  amsynth CMakeLists.txt
#
#  Copyright (C) 2021 AnClark Liu
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

cmake_minimum_required (VERSION 3.10)

project(amsynth
  VERSION 0.1.0
  DESCRIPTION "Analogue Modeling SYNTHesizer"
  LANGUAGES C CXX
  HOMEPAGE_URL "https://github.com/amsynth/amsynth"
)

option (CONFIG_GUI "Enable GUI support" ON)
option (CONFIG_VST "Enable VST support" OFF)
if (NOT WIN32)      # On Windows I prefer VST
    option (CONFIG_LV2 "Enable LV2 support" OFF)
endif ()
option (CONFIG_VST_IMGUI "Enable Dear ImGui editor for VST (experimental, EARLY ALPHA)" ON)

# Options for ImGui embedded fonts
set (INCLUDED_FONT ${CMAKE_SOURCE_DIR}/vendor/imgui/misc/fonts/Roboto-Medium.ttf CACHE STRING "Path to font file to include in build")
set (GENERATED_FONT_DIR ${CMAKE_BINARY_DIR}/generated_font)

if (UNIX AND NOT APPLE)
    option (CONFIG_STANDALONE "Enable standalone support (Unix only)" OFF)
    option (CONFIG_ALSA "Build support for ALSA" ON)
    option (CONFIG_JACK "Build suppoirt for Jack Audio Connection Kit" ON)
    option (CONFIG_LASH "Build support for LASH" OFF)
    option (CONFIG_NSM "Build support for Non Session Manager" ON)
endif ()

option (CONFIG_DEBUG "Enable debug (will log to temp directory)" OFF)

set (CONFIG_PREFIX "${CMAKE_INSTALL_PREFIX}")
include (GNUInstallDirs)
set (CONFIG_BINDIR  "${CONFIG_PREFIX}/${CMAKE_INSTALL_BINDIR}")
set (CONFIG_LIBDIR  "${CONFIG_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
set (CONFIG_DATADIR "${CONFIG_PREFIX}/${CMAKE_INSTALL_DATADIR}")
set (CONFIG_MANDIR  "${CONFIG_PREFIX}/${CMAKE_INSTALL_MANDIR}")

if (WIN32)
    set (DEFAULT_VST_PATH "$ENV{SYSTEMDRIVE}/Program Files/Steinberg/VSTPlugins")
    set (DEFAULT_LV2_PATH "$ENV{SYSTEMDRIVE}/Program Files/Common Files/LV2")
    set (DEFAULT_READONLY_DATADIR "${CONFIG_PREFIX}")
    set (DEFAULT_PKGDATADIR "${CONFIG_PREFIX}")
else ()
    set (DEFAULT_VST_PATH "/usr/lib/vst")
    set (DEFAULT_LV2_PATH "/usr/lib/lv2")
    set (DEFAULT_READONLY_DATADIR "${CONFIG_DATADIR}/amsynth/")
    set (DEFAULT_PKGDATADIR "${CONFIG_DATADIR}/amsynth/")
endif ()

set (CONFIG_READONLY_DATADIR "${DEFAULT_READONLY_DATADIR}" CACHE STRING "Directory for read-only architecture-independent data. HARDCODED in binaries.")
set (CONFIG_PKGDATADIR "${DEFAULT_PKGDATADIR}" CACHE STRING "Directory for storing package data (banks, etc.). HARDCODED in binaries.")

set (CONFIG_VST_PATH ${DEFAULT_VST_PATH} CACHE STRING "Specify VST plugin path")
set (CONFIG_LV2_PATH ${DEFAULT_LV2_PATH} CACHE STRING "Specity LV2 plugin path")


# Usually, these parameters are generated by autotools.
# In CMake, I need to feed them myself.
set (AMSYNTH_COMPILE_DEFINITIONS
    PRIVATE DATADIR="${CONFIG_READONLY_DATADIR}"
    PRIVATE PKGDATADIR="${CONFIG_PKGDATADIR}"
    PRIVATE PACKAGE="${PROJECT_NAME}"
    PRIVATE PACKAGE_NAME="${PROJECT_NAME}"
    PRIVATE PACKAGE_STRING="${PROJECT_NAME}"
    PRIVATE VERSION="${PROJECT_VERSION}"
    PRIVATE PACKAGE_URL="${PROJECT_HOMEPAGE_URL}"
    PRIVATE PACKAGE_BUGREPORT=""
)



# Must explicitly define macro to enable GUI
if (CONFIG_GUI)
    add_compile_definitions (WITH_GUI=1)
endif ()

# Enable debug support (logging to disk, etc.)
if (CONFIG_DEBUG)
    add_compile_definitions (DEBUG=1)
endif ()


# Load PkgConfig support
find_package (PkgConfig REQUIRED)

# Check for GTK2
# This is necessary for GTK-based GUI, but not for ImGui.
# Reference: https://www.cnblogs.com/zjutzz/p/10959211.html
if (CONFIG_GUI)
    if (CONFIG_VST OR CONFIG_LV2)
        pkg_check_modules (GTK2 REQUIRED gtk+-2.0)
    endif ()
endif ()

# Check for Unix-specific libraries
if (CONFIG_ALSA)
    pkg_check_modules (ALSA REQUIRED alsa)
endif ()
if (CONFIG_JACK)
    pkg_check_modules (JACK REQUIRED jack)
endif ()
if (UNIX AND NOT APPLE)
    pkg_check_modules (LIBLO REQUIRED liblo)
    find_package(X11 REQUIRED)
endif ()

# Check for plugin libs
if (CONFIG_LV2)
    pkg_check_modules (LV2 REQUIRED lv2)
endif ()

# Common include directories
include_directories (
    vendor
    ${GTK2_INCLUDE_DIRS}
)

# Enable -fPIC to let static library link properly
add_compile_options (-fPIC)


#
# Build my own GLFW
#
set(BUILD_SHARED_LIBS       OFF CACHE BOOL "")
set(GLFW_BUILD_EXAMPLES     OFF CACHE BOOL "")
set(GLFW_BUILD_TESTS        OFF CACHE BOOL "")
set(GLFW_BUILD_DOCS         OFF CACHE BOOL "")
set(GLFW_INSTALL            OFF CACHE BOOL "")
set(GLFW_THREAD_LOCAL_DATA  ON  CACHE BOOL "")
set(GLFW_VULKAN_STATIC      OFF CACHE BOOL "")
add_subdirectory(${CMAKE_SOURCE_DIR}/vendor/glfw)


#
# Build embedded ImGui fonts
#

# The font used is compiled into the binary itself using the ImGui
# supplied tool to convert it to a header file.
file (MAKE_DIRECTORY ${GENERATED_FONT_DIR})
add_executable (binary_to_compressed EXCLUDE_FROM_ALL ${CMAKE_SOURCE_DIR}/vendor/imgui/misc/fonts/binary_to_compressed_c.cpp)
target_link_options (binary_to_compressed PRIVATE -static)
add_custom_command (OUTPUT ${GENERATED_FONT_DIR}/font.h
                    COMMAND ./binary_to_compressed${CMAKE_EXECUTABLE_SUFFIX} "${INCLUDED_FONT}" font > "${GENERATED_FONT_DIR}/font.h"
                    DEPENDS binary_to_compressed VERBATIM)

add_custom_target (generate_font DEPENDS ${GENERATED_FONT_DIR}/font.h)


#
# Core components
#

set (LIBCORE_SRC
    src/Configuration.cpp
    src/Configuration.h
    src/controls.h
    src/filesystem.cpp
    src/filesystem.h
    src/midi.h
    src/MidiController.cpp
    src/MidiController.h
    src/Parameter.cpp
    src/Parameter.h
    src/Preset.cpp
    src/Preset.h
    src/PresetController.cpp
    src/PresetController.h
    src/types.h
    src/UpdateListener.h
)

set (LIBDSP_SRC
    src/Effects/Distortion.cpp
    src/Effects/Distortion.h
    src/Effects/SoftLimiter.cpp
    src/Effects/SoftLimiter.h
    src/Synthesizer.cpp
    src/Synthesizer.h
    src/TuningMap.cpp
    src/TuningMap.h
    src/VoiceAllocationUnit.cpp
    src/VoiceAllocationUnit.h
    src/VoiceBoard/ADSR.cpp
    src/VoiceBoard/ADSR.h
    src/VoiceBoard/LowPassFilter.cpp
    src/VoiceBoard/LowPassFilter.h
    src/VoiceBoard/Oscillator.cpp
    src/VoiceBoard/Oscillator.h
    src/VoiceBoard/Synth--.h
    src/VoiceBoard/VoiceBoard.cpp
    src/VoiceBoard/VoiceBoard.h
    vendor/freeverb/allpass.cpp
    vendor/freeverb/allpass.hpp
    vendor/freeverb/comb.cpp
    vendor/freeverb/comb.hpp
    vendor/freeverb/denormals.h
    vendor/freeverb/revmodel.cpp
    vendor/freeverb/revmodel.hpp
    vendor/freeverb/tuning.h
)

if (CONFIG_GUI)
    set (LIBGUI_SRC
        src/GUI/bitmap_button.c
        src/GUI/bitmap_button.h
        src/GUI/bitmap_knob.c
        src/GUI/bitmap_knob.h
        src/GUI/bitmap_popup.c
        src/GUI/bitmap_popup.h
        src/GUI/editor_menus.cpp
        src/GUI/editor_menus.h
        src/GUI/editor_pane.c
        src/GUI/editor_pane.h
        src/GUI/gui_main.cpp
        src/GUI/gui_main.h
        vendor/seq24/controllers.h
    )
endif ()

add_library (${PROJECT_NAME}_core STATIC
    ${LIBCORE_SRC}
    ${LIBDSP_SRC}
)
target_compile_definitions (${PROJECT_NAME}_core ${AMSYNTH_COMPILE_DEFINITIONS})


#
# Standalone application
#

if (CONFIG_STANDALONE)
    set (AMSYNTH_STANDALONE_SRC
        src/AudioOutput.cpp
        src/AudioOutput.h
        src/drivers/ALSAAudioDriver.cpp
        src/drivers/ALSAAudioDriver.h
        src/drivers/ALSAMidiDriver.cpp
        src/drivers/ALSAMidiDriver.h
        src/drivers/ALSAmmapAudioDriver.cpp
        src/drivers/ALSAmmapAudioDriver.h
        src/drivers/AudioDriver.h
        src/drivers/MidiDriver.h
        src/drivers/OSSAudioDriver.cpp
        src/drivers/OSSAudioDriver.h
        src/drivers/OSSMidiDriver.cpp
        src/drivers/OSSMidiDriver.h
        src/gettext.h
        src/JackOutput.cpp
        src/JackOutput.h
        src/lash.c
        src/lash.h
        src/main.h
        src/main.cpp
    )

    if (CONFIG_GUI)
        set (AMSYNTH_STANDALONE_GUI_SRC
            src/GUI/ConfigDialog.cpp
            src/GUI/ConfigDialog.h
            src/GUI/MainMenu.cpp
            src/GUI/MainMenu.h
            src/GUI/MainWindow.cpp
            src/GUI/MainWindow.h
            src/GUI/MIDILearnDialog.cpp
            src/GUI/MIDILearnDialog.h
            src/GUI/PresetControllerView.cpp
            src/GUI/PresetControllerView.h
        )
    endif ()

    if (CONFIG_NSM)
        set (AMSYNTH_STANDALONE_NSM_SRC
            src/nsm/NsmClient.cpp
            src/nsm/NsmClient.h
            src/nsm/NsmHandler.cpp
            src/nsm/NsmHandler.h
            vendor/nsm/nsm.h
        )
    endif ()

    add_executable (${PROJECT_NAME}
        ${AMSYNTH_STANDALONE_SRC}
        ${AMSYNTH_STANDALONE_GUI_SRC}
        ${AMSYNTH_STANDALONE_NSM_SRC}
        ${LIBGUI_SRC}
    )

    target_compile_definitions (${PROJECT_NAME} ${AMSYNTH_COMPILE_DEFINITIONS})

    target_link_libraries (${PROJECT_NAME} PRIVATE
        ${PROJECT_NAME}_core
        ${ALSA_LIBRARIES}
        ${JACK_LIBRARIES}
        ${LIBLO_LIBRARIES}
        ${X11_LIBRARIES}
    )

    if (CONFIG_GUI)
        target_link_libraries (${PROJECT_NAME} PRIVATE
            ${GTK2_LIBRARIES}
        )
    endif ()

endif ()


#
# VST support
#

if (CONFIG_VST)
    add_library (${PROJECT_NAME}_vst SHARED
        src/amsynth_vst.cpp
        vendor/vestige/aeffectx.h
        ${LIBGUI_SRC}
    )
    target_compile_definitions (${PROJECT_NAME}_vst ${AMSYNTH_COMPILE_DEFINITIONS})
    target_link_libraries (${PROJECT_NAME}_vst PRIVATE
        ${PROJECT_NAME}_core
    )

    if (CONFIG_GUI)
        target_link_libraries (${PROJECT_NAME}_vst PRIVATE
            ${GTK2_LIBRARIES}
        )
    endif ()

    # Disable "cast from 'gpointer' {aka 'void*'} to 'long int' loses precision" warning on Windows
    if (WIN32)
        target_compile_options (${PROJECT_NAME}_vst PRIVATE -fpermissive)
    endif ()

    # Must export VST main entry, or hosts won't recognize
    if (NOT WIN32)
        target_link_options (${PROJECT_NAME}_vst PUBLIC "-exported_symbol-regex \"VSTPluginMain|main\"")
    endif ()

endif ()

if (CONFIG_VST_IMGUI)
    set (IMGUI_DIR ${CMAKE_SOURCE_DIR}/vendor/imgui)
    set (IMGUI_SRC
        ${IMGUI_DIR}/imgui.cpp
        ${IMGUI_DIR}/imgui_demo.cpp
        ${IMGUI_DIR}/imgui_draw.cpp
        ${IMGUI_DIR}/imgui_tables.cpp
        ${IMGUI_DIR}/imgui_widgets.cpp
        ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
        ${IMGUI_DIR}/backends/imgui_impl_opengl2.cpp
    )
    set (IMGUI_ADDON_SRC
        vendor/imgui_addons/zynlab/imgui_common.cpp
        vendor/imgui_addons/zynlab/imgui_knob.cpp
        vendor/imgui_addons/anclark/imgui_extra_button.cpp
    )
    set (IMGUI_ADDON_INCLUDE_DIR
        vendor/imgui_addons/zynlab
        vendor/imgui_addons/anclark
    )
    #add_library (imgui STATIC ${IMGUI_SRC})
    #target_include_directories (imgui PRIVATE ${IMGUI_DIR})

    add_library (${PROJECT_NAME}_vst_imgui SHARED
        ${IMGUI_SRC}
        ${IMGUI_ADDON_SRC}
        src/amsynth_vst_imgui.cpp
        vendor/vestige/aeffectx.h
        src/ImGui/editor_pane.cpp
    )
    target_include_directories (${PROJECT_NAME}_vst_imgui PRIVATE
        ${CMAKE_SOURCE_DIR}/vendor
        ${IMGUI_DIR}
        ${GENERATED_FONT_DIR}
    )
    add_dependencies (${PROJECT_NAME}_vst_imgui generate_font)

    # Scope lock requires C++17
    target_compile_options (${PROJECT_NAME}_vst_imgui PRIVATE -std=c++17)

    if (WIN32)
        target_compile_definitions (${PROJECT_NAME}_vst_imgui PRIVATE GLFW_EXPOSE_NATIVE_WIN32=1)
        set (OPENGL_LIBRARIES -lopengl32)       # Must link against opengl32 to avoid link error
    else ()
        target_compile_definitions (${PROJECT_NAME}_vst_imgui PRIVATE GLFW_EXPOSE_NATIVE_X11=1)
        set (OPENGL_LIBRARIES -lGL)
    endif ()
    target_link_libraries (${PROJECT_NAME}_vst_imgui PRIVATE
        ${PROJECT_NAME}_core
        glfw
        ${OPENGL_LIBRARIES}
        #imgui
    )

    # Link against static GNU libc/libstdc++ when not using MSVC compilers
    if (WIN32 AND NOT MSVC)
        target_link_options (${PROJECT_NAME}_vst_imgui PRIVATE -static-libgcc -static-libstdc++)
    endif ()

    # Disable "cast from 'gpointer' {aka 'void*'} to 'long int' loses precision" warning on Windows
    if (WIN32)
        target_compile_options (${PROJECT_NAME}_vst_imgui PRIVATE -fpermissive)
    endif ()

    # Must export VST main entry, or hosts won't recognize
    if (NOT WIN32)
        target_link_options (${PROJECT_NAME}_vst_imgui PUBLIC "-export-symbols-regex \"VSTPluginMain|main\"")
    endif ()
endif ()

#
# LV2 Support
#
if (CONFIG_LV2)
    add_library (${PROJECT_NAME}_lv2 SHARED
        src/amsynth_lv2.cpp
        src/amsynth_lv2.h
    )
    target_compile_definitions (${PROJECT_NAME}_lv2 ${AMSYNTH_COMPILE_DEFINITIONS})
    target_link_libraries (${PROJECT_NAME}_lv2 PRIVATE
        ${PROJECT_NAME}_core
    )
    target_link_options (${PROJECT_NAME}_lv2 PRIVATE "-export-symbols-regex \"lv2_descriptor\"")

    add_library (${PROJECT_NAME}_lv2_gtk SHARED
        src/amsynth_lv2_ui_gtk.cpp
        ${LIBGUI_SRC}
    )
    target_compile_definitions (${PROJECT_NAME}_lv2_gtk ${AMSYNTH_COMPILE_DEFINITIONS})
    target_link_libraries (${PROJECT_NAME}_lv2_gtk PRIVATE
        ${PROJECT_NAME}_core
        ${LV2_LIBRARIES}
    )
    target_link_options (${PROJECT_NAME}_lv2_gtk PRIVATE "-export-symbols-regex \"lv2_descriptor\"")

endif ()

#
# Installtion
#

# Suffix of shared library
set (SF ${CMAKE_SHARED_LIBRARY_SUFFIX})

# Install standalone
if (CONFIG_STANDALONE)
    install (FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}
        DESTINATION ${CONFIG_BINDIR}
    )
endif ()

# Install VST
if (CONFIG_VST)
    install (FILES ${CMAKE_CURRENT_BINARY_DIR}/lib${PROJECT_NAME}_vst${SF}
        DESTINATION ${CONFIG_VST_PATH}
        RENAME amsynth_vst${SF}
    )
endif ()

# Install LV2
if (CONFIG_LV2)
    set (LV2_TARGET_DIR ${CONFIG_LV2_PATH}/${PROJECT_NAME}.lv2)

    set (LV2_ASSETS
        data/amsynth.lv2/manifest.ttl
        data/amsynth.lv2/amsynth.ttl
        data/amsynth.lv2/amsynth_factory.bank.ttl
        data/amsynth.lv2/BriansBank01.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank02.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank03.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank04.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank05.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank06.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank07.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank08.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank09.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank10.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank11.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank12.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank13.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank14.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank15.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank16.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank17.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank18.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank19.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank20.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank21.amSynth.bank.ttl
        data/amsynth.lv2/BriansBank22.amSynth.bank.ttl
        data/amsynth.lv2/PatriksBank01.bank.ttl
        data/amsynth.lv2/PatriksBank02.bank.ttl
        data/amsynth.lv2/PatriksBank03.bank.ttl
    )

    install (FILES ${CMAKE_CURRENT_BINARY_DIR}/lib${PROJECT_NAME}_lv2${SF}
        DESTINATION ${LV2_TARGET_DIR}
        RENAME amsynth_lv2${SF}
    )
    install (FILES ${CMAKE_CURRENT_BINARY_DIR}/lib${PROJECT_NAME}_lv2_gtk${SF}
        DESTINATION ${LV2_TARGET_DIR}
        RENAME amsynth_lv2_gtk${SF}
    )
    install (FILES ${LV2_ASSETS}
        DESTINATION ${LV2_TARGET_DIR}
    )
endif ()

# Install skins
set (SKINS_DEFAULT_DIR ${CONFIG_PKGDATADIR}/skins/default)

set (DIST_SKINSDEFAULT_DATA
    data/skins/default/background.png
    data/skins/default/button_simple.png
    data/skins/default/filter_slope.png
    data/skins/default/filter_type.png
    data/skins/default/keybmode.png
    data/skins/default/knob.png
    data/skins/default/knob_boost.png
    data/skins/default/knob_boost_cut.png
    data/skins/default/knob_mix.png
    data/skins/default/knob_osc_octave.png
    data/skins/default/knob_osc_pitch.png
    data/skins/default/knob_spot.png
    data/skins/default/knob_width.png
    data/skins/default/layout.ini
    data/skins/default/osc_select.png
    data/skins/default/portamento_modes.png
    data/skins/default/slider_boost_1.png
    data/skins/default/slider_boost_2.png
    data/skins/default/waveform_lfo.png
    data/skins/default/waveform_pics.png
)

install (FILES ${DIST_SKINSDEFAULT_DATA}
    DESTINATION ${SKINS_DEFAULT_DIR}
)

# Install factory banks
set (BANKS_DIR ${CONFIG_PKGDATADIR}/banks)

set (DIST_BANKS_DATA
    data/banks/amsynth_factory.bank
    data/banks/BriansBank01.amSynth.bank
    data/banks/BriansBank02.amSynth.bank
    data/banks/BriansBank03.amSynth.bank
    data/banks/BriansBank04.amSynth.bank
    data/banks/BriansBank05.amSynth.bank
    data/banks/BriansBank06.amSynth.bank
    data/banks/BriansBank07.amSynth.bank
    data/banks/BriansBank08.amSynth.bank
    data/banks/BriansBank09.amSynth.bank
    data/banks/BriansBank10.amSynth.bank
    data/banks/BriansBank11.amSynth.bank
    data/banks/BriansBank12.amSynth.bank
    data/banks/BriansBank13.amSynth.bank
    data/banks/BriansBank14.amSynth.bank
    data/banks/BriansBank15.amSynth.bank
    data/banks/BriansBank16.amSynth.bank
    data/banks/BriansBank17.amSynth.bank
    data/banks/BriansBank18.amSynth.bank
    data/banks/BriansBank19.amSynth.bank
    data/banks/BriansBank20.amSynth.bank
    data/banks/BriansBank21.amSynth.bank
    data/banks/BriansBank22.amSynth.bank
    data/banks/PatriksBank01.bank
    data/banks/PatriksBank02.bank
    data/banks/PatriksBank03.bank
)

install (FILES ${DIST_BANKS_DATA}
    DESTINATION ${BANKS_DIR}
)

# Install OSC configuration
install (FILES data/rc
    DESTINATION ${CONFIG_PKGDATADIR}
)
